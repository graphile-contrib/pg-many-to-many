// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`prints a schema with \`ignoreIndexes: false\` 1`] = `
type Bar implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String!
}

"""
A condition to be used against \`Bar\` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input BarCondition {
  """Checks for equality with the object’s \`id\` field."""
  id: Int
}

"""A connection to a list of \`Bar\` values."""
type BarsConnection {
  """A list of \`Bar\` objects."""
  nodes: [Bar]!

  """
  A list of edges which contains the \`Bar\` and cursor to aid in pagination.
  """
  edges: [BarsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Bar\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Bar\` edge in the connection."""
type BarsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Bar\` at the end of the edge."""
  node: Bar
}

"""Methods to use when ordering \`Bar\`."""
enum BarsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Baz implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  fooId: Int!
  barId: Int!

  """Reads a single \`Foo\` that is related to this \`Baz\`."""
  fooByFooId: Foo
}

"""
A condition to be used against \`Baz\` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input BazCondition {
  """Checks for equality with the object’s \`fooId\` field."""
  fooId: Int
}

"""A connection to a list of \`Baz\` values."""
type BazsConnection {
  """A list of \`Baz\` objects."""
  nodes: [Baz]!

  """
  A list of edges which contains the \`Baz\` and cursor to aid in pagination.
  """
  edges: [BazsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Baz\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Baz\` edge in the connection."""
type BazsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Baz\` at the end of the edge."""
  node: Baz
}

"""Methods to use when ordering \`Baz\`."""
enum BazsOrderBy {
  NATURAL
  FOO_ID_ASC
  FOO_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Corge implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  fooId: Int!
  barId: Int!

  """Reads a single \`Foo\` that is related to this \`Corge\`."""
  fooByFooId: Foo
}

"""
A condition to be used against \`Corge\` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input CorgeCondition {
  """Checks for equality with the object’s \`fooId\` field."""
  fooId: Int
}

"""A connection to a list of \`Corge\` values."""
type CorgesConnection {
  """A list of \`Corge\` objects."""
  nodes: [Corge]!

  """
  A list of edges which contains the \`Corge\` and cursor to aid in pagination.
  """
  edges: [CorgesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Corge\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Corge\` edge in the connection."""
type CorgesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Corge\` at the end of the edge."""
  node: Corge
}

"""Methods to use when ordering \`Corge\`."""
enum CorgesOrderBy {
  NATURAL
  FOO_ID_ASC
  FOO_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

type Foo implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String!

  """Reads and enables pagination through a set of \`Baz\`."""
  bazsByFooId(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering \`Baz\`."""
    orderBy: [BazsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BazCondition
  ): BazsConnection!

  """Reads and enables pagination through a set of \`Qux\`."""
  quxesByFooId(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering \`Qux\`."""
    orderBy: [QuxesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: QuxCondition
  ): QuxesConnection!

  """Reads and enables pagination through a set of \`Corge\`."""
  corgesByFooId(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering \`Corge\`."""
    orderBy: [CorgesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CorgeCondition
  ): CorgesConnection!
}

"""
A condition to be used against \`Foo\` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input FooCondition {
  """Checks for equality with the object’s \`id\` field."""
  id: Int
}

"""A connection to a list of \`Foo\` values."""
type FoosConnection {
  """A list of \`Foo\` objects."""
  nodes: [Foo]!

  """
  A list of edges which contains the \`Foo\` and cursor to aid in pagination.
  """
  edges: [FoosEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Foo\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Foo\` edge in the connection."""
type FoosEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Foo\` at the end of the edge."""
  node: Foo
}

"""Methods to use when ordering \`Foo\`."""
enum FoosOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Membership implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  personId: Int!
  teamId: Int!
  createdAt: Datetime!

  """Reads a single \`Person\` that is related to this \`Membership\`."""
  personByPersonId: Person
}

"""
A condition to be used against \`Membership\` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input MembershipCondition {
  """Checks for equality with the object’s \`personId\` field."""
  personId: Int
}

"""A connection to a list of \`Membership\` values."""
type MembershipsConnection {
  """A list of \`Membership\` objects."""
  nodes: [Membership]!

  """
  A list of edges which contains the \`Membership\` and cursor to aid in pagination.
  """
  edges: [MembershipsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Membership\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Membership\` edge in the connection."""
type MembershipsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Membership\` at the end of the edge."""
  node: Membership
}

"""Methods to use when ordering \`Membership\`."""
enum MembershipsOrderBy {
  NATURAL
  PERSON_ID_ASC
  PERSON_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""An object with a globally unique \`ID\`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""A connection to a list of \`Person\` values."""
type PeopleConnection {
  """A list of \`Person\` objects."""
  nodes: [Person]!

  """
  A list of edges which contains the \`Person\` and cursor to aid in pagination.
  """
  edges: [PeopleEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Person\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Person\` edge in the connection."""
type PeopleEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Person\` at the end of the edge."""
  node: Person
}

"""Methods to use when ordering \`Person\`."""
enum PeopleOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Person implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  personName: String!

  """Reads and enables pagination through a set of \`Membership\`."""
  membershipsByPersonId(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering \`Membership\`."""
    orderBy: [MembershipsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MembershipCondition
  ): MembershipsConnection!
}

"""
A condition to be used against \`Person\` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PersonCondition {
  """Checks for equality with the object’s \`id\` field."""
  id: Int
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a \`Node\` to work well with Relay 1 mutations. This just resolves to \`query\`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique \`ID\`."""
  node(
    """The globally unique \`ID\`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of \`Bar\`."""
  allBars(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering \`Bar\`."""
    orderBy: [BarsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BarCondition
  ): BarsConnection

  """Reads and enables pagination through a set of \`Baz\`."""
  allBazs(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering \`Baz\`."""
    orderBy: [BazsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BazCondition
  ): BazsConnection

  """Reads and enables pagination through a set of \`Foo\`."""
  allFoos(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering \`Foo\`."""
    orderBy: [FoosOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FooCondition
  ): FoosConnection

  """Reads and enables pagination through a set of \`Membership\`."""
  allMemberships(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering \`Membership\`."""
    orderBy: [MembershipsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MembershipCondition
  ): MembershipsConnection

  """Reads and enables pagination through a set of \`Person\`."""
  allPeople(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering \`Person\`."""
    orderBy: [PeopleOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonCondition
  ): PeopleConnection

  """Reads and enables pagination through a set of \`Team\`."""
  allTeams(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering \`Team\`."""
    orderBy: [TeamsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TeamCondition
  ): TeamsConnection
  barById(id: Int!): Bar
  bazByFooIdAndBarId(fooId: Int!, barId: Int!): Baz
  corgeByFooIdAndBarId(fooId: Int!, barId: Int!): Corge
  fooById(id: Int!): Foo
  membershipByPersonIdAndTeamId(personId: Int!, teamId: Int!): Membership
  personById(id: Int!): Person
  quxByFooIdAndBarId(fooId: Int!, barId: Int!): Qux
  teamById(id: Int!): Team

  """Reads a single \`Bar\` using its globally unique \`ID\`."""
  bar(
    """The globally unique \`ID\` to be used in selecting a single \`Bar\`."""
    nodeId: ID!
  ): Bar

  """Reads a single \`Baz\` using its globally unique \`ID\`."""
  baz(
    """The globally unique \`ID\` to be used in selecting a single \`Baz\`."""
    nodeId: ID!
  ): Baz

  """Reads a single \`Corge\` using its globally unique \`ID\`."""
  corge(
    """The globally unique \`ID\` to be used in selecting a single \`Corge\`."""
    nodeId: ID!
  ): Corge

  """Reads a single \`Foo\` using its globally unique \`ID\`."""
  foo(
    """The globally unique \`ID\` to be used in selecting a single \`Foo\`."""
    nodeId: ID!
  ): Foo

  """Reads a single \`Membership\` using its globally unique \`ID\`."""
  membership(
    """
    The globally unique \`ID\` to be used in selecting a single \`Membership\`.
    """
    nodeId: ID!
  ): Membership

  """Reads a single \`Person\` using its globally unique \`ID\`."""
  person(
    """The globally unique \`ID\` to be used in selecting a single \`Person\`."""
    nodeId: ID!
  ): Person

  """Reads a single \`Qux\` using its globally unique \`ID\`."""
  qux(
    """The globally unique \`ID\` to be used in selecting a single \`Qux\`."""
    nodeId: ID!
  ): Qux

  """Reads a single \`Team\` using its globally unique \`ID\`."""
  team(
    """The globally unique \`ID\` to be used in selecting a single \`Team\`."""
    nodeId: ID!
  ): Team
}

type Qux implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  fooId: Int!
  barId: Int!

  """Reads a single \`Foo\` that is related to this \`Qux\`."""
  fooByFooId: Foo
}

"""
A condition to be used against \`Qux\` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input QuxCondition {
  """Checks for equality with the object’s \`fooId\` field."""
  fooId: Int
}

"""A connection to a list of \`Qux\` values."""
type QuxesConnection {
  """A list of \`Qux\` objects."""
  nodes: [Qux]!

  """
  A list of edges which contains the \`Qux\` and cursor to aid in pagination.
  """
  edges: [QuxesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Qux\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Qux\` edge in the connection."""
type QuxesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Qux\` at the end of the edge."""
  node: Qux
}

"""Methods to use when ordering \`Qux\`."""
enum QuxesOrderBy {
  NATURAL
  FOO_ID_ASC
  FOO_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Team implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  teamName: String!
}

"""
A condition to be used against \`Team\` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TeamCondition {
  """Checks for equality with the object’s \`id\` field."""
  id: Int
}

"""A connection to a list of \`Team\` values."""
type TeamsConnection {
  """A list of \`Team\` objects."""
  nodes: [Team]!

  """
  A list of edges which contains the \`Team\` and cursor to aid in pagination.
  """
  edges: [TeamsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Team\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Team\` edge in the connection."""
type TeamsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Team\` at the end of the edge."""
  node: Team
}

"""Methods to use when ordering \`Team\`."""
enum TeamsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

`;
