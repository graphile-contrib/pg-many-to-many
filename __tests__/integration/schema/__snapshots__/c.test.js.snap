// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`prints a schema using the 'c' database schema 1`] = `
type Bar implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  barId: Int!
  barName: String!

  """Reads and enables pagination through a set of \`Junction\`."""
  junctionsByJBarId(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering \`Junction\`."""
    orderBy: [JunctionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): JunctionsConnection!

  """Reads and enables pagination through a set of \`Foo\`."""
  foosByJunctionJBarIdAndJFooId(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering \`Foo\`."""
    orderBy: [FoosOrderBy!] = [PRIMARY_KEY_ASC]
  ): BarFoosByJunctionJBarIdAndJFooIdManyToManyConnection!
}

"""A connection to a list of \`Foo\` values, with data from \`Junction\`."""
type BarFoosByJunctionJBarIdAndJFooIdManyToManyConnection {
  """A list of \`Foo\` objects."""
  nodes: [Foo]!

  """
  A list of edges which contains the \`Foo\`, info from the \`Junction\`, and the cursor to aid in pagination.
  """
  edges: [BarFoosByJunctionJBarIdAndJFooIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Foo\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Foo\` edge in the connection, with data from \`Junction\`."""
type BarFoosByJunctionJBarIdAndJFooIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Foo\` at the end of the edge."""
  node: Foo

  """Reads and enables pagination through a set of \`Junction\`."""
  junctionsByJFooId(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering \`Junction\`."""
    orderBy: [JunctionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): JunctionsConnection!
}

"""A connection to a list of \`Bar\` values."""
type BarsConnection {
  """A list of \`Bar\` objects."""
  nodes: [Bar]!

  """
  A list of edges which contains the \`Bar\` and cursor to aid in pagination.
  """
  edges: [BarsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Bar\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Bar\` edge in the connection."""
type BarsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Bar\` at the end of the edge."""
  node: Bar
}

"""Methods to use when ordering \`Bar\`."""
enum BarsOrderBy {
  NATURAL
  BAR_ID_ASC
  BAR_ID_DESC
  BAR_NAME_ASC
  BAR_NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

type Foo implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  fooId: Int!
  fooName: String!

  """Reads and enables pagination through a set of \`Junction\`."""
  junctionsByJFooId(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering \`Junction\`."""
    orderBy: [JunctionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): JunctionsConnection!

  """Reads and enables pagination through a set of \`Bar\`."""
  barsByJunctionJFooIdAndJBarId(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering \`Bar\`."""
    orderBy: [BarsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FooBarsByJunctionJFooIdAndJBarIdManyToManyConnection!
}

"""A connection to a list of \`Bar\` values, with data from \`Junction\`."""
type FooBarsByJunctionJFooIdAndJBarIdManyToManyConnection {
  """A list of \`Bar\` objects."""
  nodes: [Bar]!

  """
  A list of edges which contains the \`Bar\`, info from the \`Junction\`, and the cursor to aid in pagination.
  """
  edges: [FooBarsByJunctionJFooIdAndJBarIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Bar\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Bar\` edge in the connection, with data from \`Junction\`."""
type FooBarsByJunctionJFooIdAndJBarIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Bar\` at the end of the edge."""
  node: Bar

  """Reads and enables pagination through a set of \`Junction\`."""
  junctionsByJBarId(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering \`Junction\`."""
    orderBy: [JunctionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): JunctionsConnection!
}

"""A connection to a list of \`Foo\` values."""
type FoosConnection {
  """A list of \`Foo\` objects."""
  nodes: [Foo]!

  """
  A list of edges which contains the \`Foo\` and cursor to aid in pagination.
  """
  edges: [FoosEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Foo\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Foo\` edge in the connection."""
type FoosEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Foo\` at the end of the edge."""
  node: Foo
}

"""Methods to use when ordering \`Foo\`."""
enum FoosOrderBy {
  NATURAL
  FOO_ID_ASC
  FOO_ID_DESC
  FOO_NAME_ASC
  FOO_NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Junction implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  jFooId: Int
  jBarId: Int

  """Reads a single \`Foo\` that is related to this \`Junction\`."""
  fooByJFooId: Foo

  """Reads a single \`Bar\` that is related to this \`Junction\`."""
  barByJBarId: Bar
}

"""A connection to a list of \`Junction\` values."""
type JunctionsConnection {
  """A list of \`Junction\` objects."""
  nodes: [Junction]!

  """
  A list of edges which contains the \`Junction\` and cursor to aid in pagination.
  """
  edges: [JunctionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Junction\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Junction\` edge in the connection."""
type JunctionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Junction\` at the end of the edge."""
  node: Junction
}

"""Methods to use when ordering \`Junction\`."""
enum JunctionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  J_FOO_ID_ASC
  J_FOO_ID_DESC
  J_BAR_ID_ASC
  J_BAR_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""An object with a globally unique \`ID\`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a \`Node\` to work well with Relay 1 mutations. This just resolves to \`query\`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique \`ID\`."""
  node(
    """The globally unique \`ID\`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of \`Bar\`."""
  allBars(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering \`Bar\`."""
    orderBy: [BarsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BarsConnection

  """Reads and enables pagination through a set of \`Foo\`."""
  allFoos(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering \`Foo\`."""
    orderBy: [FoosOrderBy!] = [PRIMARY_KEY_ASC]
  ): FoosConnection

  """Reads and enables pagination through a set of \`Junction\`."""
  allJunctions(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering \`Junction\`."""
    orderBy: [JunctionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): JunctionsConnection
  barByBarId(barId: Int!): Bar
  fooByFooId(fooId: Int!): Foo
  junctionById(id: Int!): Junction

  """Reads a single \`Bar\` using its globally unique \`ID\`."""
  bar(
    """The globally unique \`ID\` to be used in selecting a single \`Bar\`."""
    nodeId: ID!
  ): Bar

  """Reads a single \`Foo\` using its globally unique \`ID\`."""
  foo(
    """The globally unique \`ID\` to be used in selecting a single \`Foo\`."""
    nodeId: ID!
  ): Foo

  """Reads a single \`Junction\` using its globally unique \`ID\`."""
  junction(
    """The globally unique \`ID\` to be used in selecting a single \`Junction\`."""
    nodeId: ID!
  ): Junction
}

`;
