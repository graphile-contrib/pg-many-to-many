// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`prints a schema using the 'e' database schema 1`] = `
"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

type Membership implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  personId: Int!
  teamId: Int!

  """Reads a single \`Person\` that is related to this \`Membership\`."""
  personByPersonId: Person

  """Reads a single \`Team\` that is related to this \`Membership\`."""
  teamByTeamId: Team
}

"""
A condition to be used against \`Membership\` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input MembershipCondition {
  """Checks for equality with the object’s \`personId\` field."""
  personId: Int

  """Checks for equality with the object’s \`teamId\` field."""
  teamId: Int
}

"""A connection to a list of \`Membership\` values."""
type MembershipsConnection {
  """A list of \`Membership\` objects."""
  nodes: [Membership!]!

  """
  A list of edges which contains the \`Membership\` and cursor to aid in pagination.
  """
  edges: [MembershipsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Membership\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Membership\` edge in the connection."""
type MembershipsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Membership\` at the end of the edge."""
  node: Membership!
}

"""Methods to use when ordering \`Membership\`."""
enum MembershipsOrderBy {
  NATURAL
  PERSON_ID_ASC
  PERSON_ID_DESC
  TEAM_ID_ASC
  TEAM_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""An object with a globally unique \`ID\`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""A connection to a list of \`Person\` values."""
type PeopleConnection {
  """A list of \`Person\` objects."""
  nodes: [Person!]!

  """
  A list of edges which contains the \`Person\` and cursor to aid in pagination.
  """
  edges: [PeopleEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Person\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Person\` edge in the connection."""
type PeopleEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Person\` at the end of the edge."""
  node: Person!
}

"""Methods to use when ordering \`Person\`."""
enum PeopleOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PERSON_NAME_ASC
  PERSON_NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Person implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  personName: String!

  """Reads and enables pagination through a set of \`Membership\`."""
  membershipsByPersonId(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering \`Membership\`."""
    orderBy: [MembershipsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MembershipCondition
  ): MembershipsConnection!

  """Reads and enables pagination through a set of \`PersonTagJunction\`."""
  personTagJunctionsByPersonId(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering \`PersonTagJunction\`."""
    orderBy: [PersonTagJunctionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonTagJunctionCondition
  ): PersonTagJunctionsConnection!

  """Reads and enables pagination through a set of \`Team\`."""
  teams(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering \`Team\`."""
    orderBy: [TeamsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TeamCondition
  ): PersonTeamsManyToManyConnection!

  """Reads and enables pagination through a set of \`Tag\`."""
  tags(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering \`Tag\`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TagCondition
  ): PersonTagsManyToManyConnection!
}

"""
A condition to be used against \`Person\` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PersonCondition {
  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`personName\` field."""
  personName: String
}

type PersonTagJunction implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  personId: Int!
  tagId: Int!

  """Reads a single \`Person\` that is related to this \`PersonTagJunction\`."""
  personByPersonId: Person

  """Reads a single \`Tag\` that is related to this \`PersonTagJunction\`."""
  tagByTagId: Tag
}

"""
A condition to be used against \`PersonTagJunction\` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input PersonTagJunctionCondition {
  """Checks for equality with the object’s \`personId\` field."""
  personId: Int

  """Checks for equality with the object’s \`tagId\` field."""
  tagId: Int
}

"""A connection to a list of \`PersonTagJunction\` values."""
type PersonTagJunctionsConnection {
  """A list of \`PersonTagJunction\` objects."""
  nodes: [PersonTagJunction!]!

  """
  A list of edges which contains the \`PersonTagJunction\` and cursor to aid in pagination.
  """
  edges: [PersonTagJunctionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* \`PersonTagJunction\` you could get from the connection.
  """
  totalCount: Int!
}

"""A \`PersonTagJunction\` edge in the connection."""
type PersonTagJunctionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`PersonTagJunction\` at the end of the edge."""
  node: PersonTagJunction!
}

"""Methods to use when ordering \`PersonTagJunction\`."""
enum PersonTagJunctionsOrderBy {
  NATURAL
  PERSON_ID_ASC
  PERSON_ID_DESC
  TAG_ID_ASC
  TAG_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A connection to a list of \`Tag\` values, with data from \`PersonTagJunction\`.
"""
type PersonTagsManyToManyConnection {
  """A list of \`Tag\` objects."""
  nodes: [Tag!]!

  """
  A list of edges which contains the \`Tag\`, info from the \`PersonTagJunction\`, and the cursor to aid in pagination.
  """
  edges: [PersonTagsManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Tag\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Tag\` edge in the connection, with data from \`PersonTagJunction\`."""
type PersonTagsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Tag\` at the end of the edge."""
  node: Tag!
}

"""A connection to a list of \`Team\` values, with data from \`Membership\`."""
type PersonTeamsManyToManyConnection {
  """A list of \`Team\` objects."""
  nodes: [Team!]!

  """
  A list of edges which contains the \`Team\`, info from the \`Membership\`, and the cursor to aid in pagination.
  """
  edges: [PersonTeamsManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Team\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Team\` edge in the connection, with data from \`Membership\`."""
type PersonTeamsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Team\` at the end of the edge."""
  node: Team!
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a \`Node\` to work well with Relay 1 mutations. This just resolves to \`query\`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique \`ID\`."""
  node(
    """The globally unique \`ID\`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of \`Membership\`."""
  allMemberships(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering \`Membership\`."""
    orderBy: [MembershipsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MembershipCondition
  ): MembershipsConnection

  """Reads and enables pagination through a set of \`Person\`."""
  allPeople(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering \`Person\`."""
    orderBy: [PeopleOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonCondition
  ): PeopleConnection

  """Reads and enables pagination through a set of \`PersonTagJunction\`."""
  allPersonTagJunctions(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering \`PersonTagJunction\`."""
    orderBy: [PersonTagJunctionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonTagJunctionCondition
  ): PersonTagJunctionsConnection

  """Reads and enables pagination through a set of \`Tag\`."""
  allTags(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering \`Tag\`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TagCondition
  ): TagsConnection

  """Reads and enables pagination through a set of \`Team\`."""
  allTeams(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering \`Team\`."""
    orderBy: [TeamsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TeamCondition
  ): TeamsConnection

  """Reads and enables pagination through a set of \`TeamTagJunction\`."""
  allTeamTagJunctions(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering \`TeamTagJunction\`."""
    orderBy: [TeamTagJunctionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TeamTagJunctionCondition
  ): TeamTagJunctionsConnection
  membershipByPersonIdAndTeamId(personId: Int!, teamId: Int!): Membership
  personById(id: Int!): Person
  personTagJunctionByPersonIdAndTagId(personId: Int!, tagId: Int!): PersonTagJunction
  tagById(id: Int!): Tag
  teamById(id: Int!): Team
  teamTagJunctionByTeamIdAndTagId(teamId: Int!, tagId: Int!): TeamTagJunction

  """Reads a single \`Membership\` using its globally unique \`ID\`."""
  membership(
    """
    The globally unique \`ID\` to be used in selecting a single \`Membership\`.
    """
    nodeId: ID!
  ): Membership

  """Reads a single \`Person\` using its globally unique \`ID\`."""
  person(
    """The globally unique \`ID\` to be used in selecting a single \`Person\`."""
    nodeId: ID!
  ): Person

  """Reads a single \`PersonTagJunction\` using its globally unique \`ID\`."""
  personTagJunction(
    """
    The globally unique \`ID\` to be used in selecting a single \`PersonTagJunction\`.
    """
    nodeId: ID!
  ): PersonTagJunction

  """Reads a single \`Tag\` using its globally unique \`ID\`."""
  tag(
    """The globally unique \`ID\` to be used in selecting a single \`Tag\`."""
    nodeId: ID!
  ): Tag

  """Reads a single \`Team\` using its globally unique \`ID\`."""
  team(
    """The globally unique \`ID\` to be used in selecting a single \`Team\`."""
    nodeId: ID!
  ): Team

  """Reads a single \`TeamTagJunction\` using its globally unique \`ID\`."""
  teamTagJunction(
    """
    The globally unique \`ID\` to be used in selecting a single \`TeamTagJunction\`.
    """
    nodeId: ID!
  ): TeamTagJunction
}

type Tag implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  tagName: String!

  """Reads and enables pagination through a set of \`PersonTagJunction\`."""
  personTagJunctionsByTagId(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering \`PersonTagJunction\`."""
    orderBy: [PersonTagJunctionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonTagJunctionCondition
  ): PersonTagJunctionsConnection!

  """Reads and enables pagination through a set of \`TeamTagJunction\`."""
  teamTagJunctionsByTagId(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering \`TeamTagJunction\`."""
    orderBy: [TeamTagJunctionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TeamTagJunctionCondition
  ): TeamTagJunctionsConnection!

  """Reads and enables pagination through a set of \`Person\`."""
  people(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering \`Person\`."""
    orderBy: [PeopleOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonCondition
  ): TagPeopleManyToManyConnection!

  """Reads and enables pagination through a set of \`Team\`."""
  teams(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering \`Team\`."""
    orderBy: [TeamsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TeamCondition
  ): TagTeamsManyToManyConnection!
}

"""
A condition to be used against \`Tag\` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TagCondition {
  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`tagName\` field."""
  tagName: String
}

"""
A connection to a list of \`Person\` values, with data from \`PersonTagJunction\`.
"""
type TagPeopleManyToManyConnection {
  """A list of \`Person\` objects."""
  nodes: [Person!]!

  """
  A list of edges which contains the \`Person\`, info from the \`PersonTagJunction\`, and the cursor to aid in pagination.
  """
  edges: [TagPeopleManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Person\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Person\` edge in the connection, with data from \`PersonTagJunction\`."""
type TagPeopleManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Person\` at the end of the edge."""
  node: Person!
}

"""A connection to a list of \`Tag\` values."""
type TagsConnection {
  """A list of \`Tag\` objects."""
  nodes: [Tag!]!

  """
  A list of edges which contains the \`Tag\` and cursor to aid in pagination.
  """
  edges: [TagsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Tag\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Tag\` edge in the connection."""
type TagsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Tag\` at the end of the edge."""
  node: Tag!
}

"""Methods to use when ordering \`Tag\`."""
enum TagsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TAG_NAME_ASC
  TAG_NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A connection to a list of \`Team\` values, with data from \`TeamTagJunction\`.
"""
type TagTeamsManyToManyConnection {
  """A list of \`Team\` objects."""
  nodes: [Team!]!

  """
  A list of edges which contains the \`Team\`, info from the \`TeamTagJunction\`, and the cursor to aid in pagination.
  """
  edges: [TagTeamsManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Team\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Team\` edge in the connection, with data from \`TeamTagJunction\`."""
type TagTeamsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Team\` at the end of the edge."""
  node: Team!
}

type Team implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  teamName: String!

  """Reads and enables pagination through a set of \`Membership\`."""
  membershipsByTeamId(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering \`Membership\`."""
    orderBy: [MembershipsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MembershipCondition
  ): MembershipsConnection!

  """Reads and enables pagination through a set of \`TeamTagJunction\`."""
  teamTagJunctionsByTeamId(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering \`TeamTagJunction\`."""
    orderBy: [TeamTagJunctionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TeamTagJunctionCondition
  ): TeamTagJunctionsConnection!

  """Reads and enables pagination through a set of \`Person\`."""
  people(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering \`Person\`."""
    orderBy: [PeopleOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonCondition
  ): TeamPeopleManyToManyConnection!

  """Reads and enables pagination through a set of \`Tag\`."""
  tags(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering \`Tag\`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TagCondition
  ): TeamTagsManyToManyConnection!
}

"""
A condition to be used against \`Team\` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TeamCondition {
  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`teamName\` field."""
  teamName: String
}

"""
A connection to a list of \`Person\` values, with data from \`Membership\`.
"""
type TeamPeopleManyToManyConnection {
  """A list of \`Person\` objects."""
  nodes: [Person!]!

  """
  A list of edges which contains the \`Person\`, info from the \`Membership\`, and the cursor to aid in pagination.
  """
  edges: [TeamPeopleManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Person\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Person\` edge in the connection, with data from \`Membership\`."""
type TeamPeopleManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Person\` at the end of the edge."""
  node: Person!
}

"""A connection to a list of \`Team\` values."""
type TeamsConnection {
  """A list of \`Team\` objects."""
  nodes: [Team!]!

  """
  A list of edges which contains the \`Team\` and cursor to aid in pagination.
  """
  edges: [TeamsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Team\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Team\` edge in the connection."""
type TeamsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Team\` at the end of the edge."""
  node: Team!
}

"""Methods to use when ordering \`Team\`."""
enum TeamsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TEAM_NAME_ASC
  TEAM_NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type TeamTagJunction implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  teamId: Int!
  tagId: Int!

  """Reads a single \`Team\` that is related to this \`TeamTagJunction\`."""
  teamByTeamId: Team

  """Reads a single \`Tag\` that is related to this \`TeamTagJunction\`."""
  tagByTagId: Tag
}

"""
A condition to be used against \`TeamTagJunction\` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TeamTagJunctionCondition {
  """Checks for equality with the object’s \`teamId\` field."""
  teamId: Int

  """Checks for equality with the object’s \`tagId\` field."""
  tagId: Int
}

"""A connection to a list of \`TeamTagJunction\` values."""
type TeamTagJunctionsConnection {
  """A list of \`TeamTagJunction\` objects."""
  nodes: [TeamTagJunction!]!

  """
  A list of edges which contains the \`TeamTagJunction\` and cursor to aid in pagination.
  """
  edges: [TeamTagJunctionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* \`TeamTagJunction\` you could get from the connection.
  """
  totalCount: Int!
}

"""A \`TeamTagJunction\` edge in the connection."""
type TeamTagJunctionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`TeamTagJunction\` at the end of the edge."""
  node: TeamTagJunction!
}

"""Methods to use when ordering \`TeamTagJunction\`."""
enum TeamTagJunctionsOrderBy {
  NATURAL
  TEAM_ID_ASC
  TEAM_ID_DESC
  TAG_ID_ASC
  TAG_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A connection to a list of \`Tag\` values, with data from \`TeamTagJunction\`.
"""
type TeamTagsManyToManyConnection {
  """A list of \`Tag\` objects."""
  nodes: [Tag!]!

  """
  A list of edges which contains the \`Tag\`, info from the \`TeamTagJunction\`, and the cursor to aid in pagination.
  """
  edges: [TeamTagsManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Tag\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Tag\` edge in the connection, with data from \`TeamTagJunction\`."""
type TeamTagsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Tag\` at the end of the edge."""
  node: Tag!
}

`;
