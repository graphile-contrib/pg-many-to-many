// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`prints a schema with the many-to-many plugin 1`] = `
"\\"\\"\\"A location in a connection that can be used for resuming pagination.\\"\\"\\"
scalar Cursor

\\"\\"\\"
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
\\"\\"\\"
scalar Datetime

\\"\\"\\"An object with a globally unique \`ID\`.\\"\\"\\"
interface Node {
  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"Information about pagination in a connection.\\"\\"\\"
type PageInfo {
  \\"\\"\\"When paginating forwards, the cursor to continue.\\"\\"\\"
  endCursor: Cursor

  \\"\\"\\"When paginating forwards, are there more items?\\"\\"\\"
  hasNextPage: Boolean!

  \\"\\"\\"When paginating backwards, are there more items?\\"\\"\\"
  hasPreviousPage: Boolean!

  \\"\\"\\"When paginating backwards, the cursor to continue.\\"\\"\\"
  startCursor: Cursor
}

\\"\\"\\"A connection to a list of \`Person\` values.\\"\\"\\"
type PeopleConnection {
  \\"\\"\\"
  A list of edges which contains the \`Person\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [PeopleEdge!]!

  \\"\\"\\"A list of \`Person\` objects.\\"\\"\\"
  nodes: [Person]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`Person\` you could get from the connection.\\"\\"\\"
  totalCount: Int
}

\\"\\"\\"A \`Person\` edge in the connection.\\"\\"\\"
type PeopleEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`Person\` at the end of the edge.\\"\\"\\"
  node: Person
}

\\"\\"\\"Methods to use when ordering \`Person\`.\\"\\"\\"
enum PeopleOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PERSON_NAME_ASC
  PERSON_NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Person implements Node {
  id: Int!

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
  personName: String!

  \\"\\"\\"Reads and enables pagination through a set of \`TeamMember\`.\\"\\"\\"
  teamMembersByPersonId(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: TeamMemberCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`TeamMember\`.\\"\\"\\"
    orderBy: [TeamMembersOrderBy!] = [PRIMARY_KEY_ASC]
  ): TeamMembersConnection!

  \\"\\"\\"Reads and enables pagination through a set of \`TeamMember\`.\\"\\"\\"
  teamMembersByPersonIdList(
    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: TeamMemberCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Skip the first \`n\` values.\\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`TeamMember\`.\\"\\"\\"
    orderBy: [TeamMembersOrderBy!]
  ): [TeamMember!]!

  \\"\\"\\"Reads and enables pagination through a set of \`Team\`.\\"\\"\\"
  teamsByTeamMemberPersonIdAndTeamId(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: TeamCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Team\`.\\"\\"\\"
    orderBy: [TeamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TeamsConnection!
}

\\"\\"\\"
A condition to be used against \`Person\` object types. All fields are tested for equality and combined with a logical ‘and.’
\\"\\"\\"
input PersonCondition {
  \\"\\"\\"Checks for equality with the object’s \`id\` field.\\"\\"\\"
  id: Int

  \\"\\"\\"Checks for equality with the object’s \`personName\` field.\\"\\"\\"
  personName: String
}

\\"\\"\\"The root query type which gives access points into the data universe.\\"\\"\\"
type Query implements Node {
  \\"\\"\\"Reads and enables pagination through a set of \`Person\`.\\"\\"\\"
  allPeople(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: PersonCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Person\`.\\"\\"\\"
    orderBy: [PeopleOrderBy!] = [PRIMARY_KEY_ASC]
  ): PeopleConnection

  \\"\\"\\"Reads a set of \`Person\`.\\"\\"\\"
  allPeopleList(
    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: PersonCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Skip the first \`n\` values.\\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Person\`.\\"\\"\\"
    orderBy: [PeopleOrderBy!]
  ): [Person!]

  \\"\\"\\"Reads and enables pagination through a set of \`TeamMember\`.\\"\\"\\"
  allTeamMembers(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: TeamMemberCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`TeamMember\`.\\"\\"\\"
    orderBy: [TeamMembersOrderBy!] = [PRIMARY_KEY_ASC]
  ): TeamMembersConnection

  \\"\\"\\"Reads a set of \`TeamMember\`.\\"\\"\\"
  allTeamMembersList(
    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: TeamMemberCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Skip the first \`n\` values.\\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`TeamMember\`.\\"\\"\\"
    orderBy: [TeamMembersOrderBy!]
  ): [TeamMember!]

  \\"\\"\\"Reads and enables pagination through a set of \`Team\`.\\"\\"\\"
  allTeams(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: TeamCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Team\`.\\"\\"\\"
    orderBy: [TeamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TeamsConnection

  \\"\\"\\"Reads a set of \`Team\`.\\"\\"\\"
  allTeamsList(
    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: TeamCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Skip the first \`n\` values.\\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Team\`.\\"\\"\\"
    orderBy: [TeamsOrderBy!]
  ): [Team!]

  \\"\\"\\"Fetches an object given its globally unique \`ID\`.\\"\\"\\"
  node(
    \\"\\"\\"The globally unique \`ID\`.\\"\\"\\"
    nodeId: ID!
  ): Node

  \\"\\"\\"
  The root query type must be a \`Node\` to work well with Relay 1 mutations. This just resolves to \`query\`.
  \\"\\"\\"
  nodeId: ID!

  \\"\\"\\"Reads a single \`Person\` using its globally unique \`ID\`.\\"\\"\\"
  person(
    \\"\\"\\"The globally unique \`ID\` to be used in selecting a single \`Person\`.\\"\\"\\"
    nodeId: ID!
  ): Person
  personById(id: Int!): Person

  \\"\\"\\"
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  \\"\\"\\"
  query: Query!

  \\"\\"\\"Reads a single \`Team\` using its globally unique \`ID\`.\\"\\"\\"
  team(
    \\"\\"\\"The globally unique \`ID\` to be used in selecting a single \`Team\`.\\"\\"\\"
    nodeId: ID!
  ): Team
  teamById(id: Int!): Team

  \\"\\"\\"Reads a single \`TeamMember\` using its globally unique \`ID\`.\\"\\"\\"
  teamMember(
    \\"\\"\\"
    The globally unique \`ID\` to be used in selecting a single \`TeamMember\`.
    \\"\\"\\"
    nodeId: ID!
  ): TeamMember
  teamMemberByPersonIdAndTeamId(personId: Int!, teamId: Int!): TeamMember
}

type Team implements Node {
  id: Int!

  \\"\\"\\"Reads and enables pagination through a set of \`Person\`.\\"\\"\\"
  members(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: PersonCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Person\`.\\"\\"\\"
    orderBy: [PeopleOrderBy!] = [PRIMARY_KEY_ASC]
  ): PeopleConnection!

  \\"\\"\\"Reads and enables pagination through a set of \`Person\`.\\"\\"\\"
  membersList(
    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: PersonCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Skip the first \`n\` values.\\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Person\`.\\"\\"\\"
    orderBy: [PeopleOrderBy!]
  ): [Person!]!

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!

  \\"\\"\\"Reads and enables pagination through a set of \`TeamMember\`.\\"\\"\\"
  teamMembersByTeamId(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: TeamMemberCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`TeamMember\`.\\"\\"\\"
    orderBy: [TeamMembersOrderBy!] = [PRIMARY_KEY_ASC]
  ): TeamMembersConnection!

  \\"\\"\\"Reads and enables pagination through a set of \`TeamMember\`.\\"\\"\\"
  teamMembersByTeamIdList(
    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: TeamMemberCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Skip the first \`n\` values.\\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`TeamMember\`.\\"\\"\\"
    orderBy: [TeamMembersOrderBy!]
  ): [TeamMember!]!
  teamName: String!
}

\\"\\"\\"
A condition to be used against \`Team\` object types. All fields are tested for equality and combined with a logical ‘and.’
\\"\\"\\"
input TeamCondition {
  \\"\\"\\"Checks for equality with the object’s \`id\` field.\\"\\"\\"
  id: Int

  \\"\\"\\"Checks for equality with the object’s \`teamName\` field.\\"\\"\\"
  teamName: String
}

type TeamMember implements Node {
  createdAt: Datetime!

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!

  \\"\\"\\"Reads a single \`Person\` that is related to this \`TeamMember\`.\\"\\"\\"
  personByPersonId: Person
  personId: Int!

  \\"\\"\\"Reads a single \`Team\` that is related to this \`TeamMember\`.\\"\\"\\"
  teamByTeamId: Team
  teamId: Int!
}

\\"\\"\\"
A condition to be used against \`TeamMember\` object types. All fields are tested
for equality and combined with a logical ‘and.’
\\"\\"\\"
input TeamMemberCondition {
  \\"\\"\\"Checks for equality with the object’s \`createdAt\` field.\\"\\"\\"
  createdAt: Datetime

  \\"\\"\\"Checks for equality with the object’s \`personId\` field.\\"\\"\\"
  personId: Int

  \\"\\"\\"Checks for equality with the object’s \`teamId\` field.\\"\\"\\"
  teamId: Int
}

\\"\\"\\"A connection to a list of \`TeamMember\` values.\\"\\"\\"
type TeamMembersConnection {
  \\"\\"\\"
  A list of edges which contains the \`TeamMember\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [TeamMembersEdge!]!

  \\"\\"\\"A list of \`TeamMember\` objects.\\"\\"\\"
  nodes: [TeamMember]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`TeamMember\` you could get from the connection.\\"\\"\\"
  totalCount: Int
}

\\"\\"\\"A \`TeamMember\` edge in the connection.\\"\\"\\"
type TeamMembersEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`TeamMember\` at the end of the edge.\\"\\"\\"
  node: TeamMember
}

\\"\\"\\"Methods to use when ordering \`TeamMember\`.\\"\\"\\"
enum TeamMembersOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  NATURAL
  PERSON_ID_ASC
  PERSON_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TEAM_ID_ASC
  TEAM_ID_DESC
}

\\"\\"\\"A connection to a list of \`Team\` values.\\"\\"\\"
type TeamsConnection {
  \\"\\"\\"
  A list of edges which contains the \`Team\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [TeamsEdge!]!

  \\"\\"\\"A list of \`Team\` objects.\\"\\"\\"
  nodes: [Team]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`Team\` you could get from the connection.\\"\\"\\"
  totalCount: Int
}

\\"\\"\\"A \`Team\` edge in the connection.\\"\\"\\"
type TeamsEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`Team\` at the end of the edge.\\"\\"\\"
  node: Team
}

\\"\\"\\"Methods to use when ordering \`Team\`.\\"\\"\\"
enum TeamsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TEAM_NAME_ASC
  TEAM_NAME_DESC
}
"
`;
